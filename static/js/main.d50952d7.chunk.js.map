{"version":3,"sources":["Blocks.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["window","decomp","wallThickness","Blocks","boxRef","useRef","canvasRef","useEffect","current","boxWidth","offsetWidth","boxHeight","offsetHeight","boxCenter","floorVerticalCenter","engine","Engine","create","world","render","Render","element","undefined","canvas","options","width","height","background","wireframes","run","runner","Runner","World","add","Bodies","rectangle","isStatic","square","x","y","arrow","chevron","star","stack","Composites","color","Common","choose","fromVertices","fillStyle","strokeStyle","lineWidth","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","visible","ref","style","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d50952d7.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport {Bodies, Common, Composites, Engine, Mouse, MouseConstraint, Render, Runner, Vertices, World} from \"matter-js\"\n\n// fix issue with matter vertices requirement\nimport decomp from 'poly-decomp';\nwindow.decomp = decomp;\n\nconst blockWidth = 80\nconst blockHeight = 80\nconst stackColumns = 6\nconst stackRows = 4\nconst stackWidth = stackColumns * blockWidth\nconst stackHeight = stackRows * blockHeight\n\nconst wallThickness = 100\n// so high that when blocks are flung really high, they still can't escape over side wall\nconst wallHeight = 10_000\nconst floorThickness = 50\n\nexport const Blocks = () => {\n    const boxRef = useRef(null)\n    const canvasRef = useRef(null)\n    useEffect(() => {\n        // TODO allow window resize to resize canvas width / height\n        if (boxRef.current === null) {\n            return\n        }\n\n        const boxWidth = boxRef.current.offsetWidth\n        const boxHeight = boxRef.current.offsetHeight\n        const boxCenter = boxWidth / 2\n        const stackLeft = boxCenter - stackWidth / 2\n        const floorVerticalCenter = boxHeight - 40\n        const stackTop = floorVerticalCenter - stackHeight - 100\n\n        const engine = Engine.create()\n        const world = engine.world\n        const render = Render.create({\n            element: boxRef.current || undefined,\n            engine: engine,\n            canvas: canvasRef.current || undefined,\n            options: {\n                width: boxWidth,\n                height: boxHeight,\n                background: \"rgba(255, 0, 0, 0.5)\",\n                wireframes: false,\n            },\n        })\n        Render.run(render)\n        // create runner\n        var runner = Runner.create();\n        Runner.run(runner, engine);\n\n\n        // add walls\n        World.add(world, [\n            Bodies.rectangle(boxCenter, floorVerticalCenter, boxWidth, floorThickness, { isStatic: true }),\n            Bodies.rectangle(-wallThickness / 2, boxHeight / 2, wallThickness, wallHeight, { isStatic: true }),\n            Bodies.rectangle(boxWidth + wallThickness / 2, boxHeight / 2, wallThickness, wallHeight, { isStatic: true })\n        ]);\n\n        // // add bodies\n        // const stack = Composites.stack(stackLeft, stackTop, stackColumns, stackRows, 0, 0, (x, y) => {\n        //     return Bodies.rectangle(x, y, blockWidth, blockHeight);\n        // });\n\n        // World.add(world, stack);\n        const square = [{x: 80, y: 0}, {x: 80, y: 80}, {x: 0, y: 80}, {x: 0, y: 0}]\n        const arrow = [{x: 40, y: 0}, {x: 40, y: 20}, {x: 100, y: 20}, {x: 100, y: 80}, {x: 40, y: 80}, {x: 40, y: 100}, {x: 0, y: 50}]\n        const chevron = [{x: 100, y: 0}, {x: 75, y: 50}, {x: 100, y: 100}, {x: 25, y: 100}, {x: 0, y: 50}, {x: 25, y: 0}]\n        const star = [{x: 50, y: 0}, {x: 63, y: 38}, {x: 100, y: 38}, {x: 69, y: 59}, {x: 82, y: 100}, {x: 50, y: 75}, {x: 18, y: 100}, {x: 31, y: 59}, {x: 0, y: 38}, {x: 37, y: 38}]\n        // const horseShoe = [{x: 35, y: 7}, {x: 19, y: 17}, {x: 14, y: 38}, {x: 14, y: 58}, {x: 25, y: 79}, {x: 45, y: 85}, {x: 65, y: 84}, {x: 65, y: 66}, {x: 46, y: 67}, {x: 34, y: 59}, {x: 30, y: 44}, {x: 33, y: 29}, {x: 45, y: 23}, {x: 66, y: 23}, {x: 66, y: 7}, {x: 53, y: 7}]\n\n        const stack = Composites.stack(50, 50, 5, 4, 10, 10, function(x, y) {\n            var color = Common.choose(['#556270', '#4ECDC4', '#C7F464', '#FF6B6B', '#C44D58']);\n            return Bodies.fromVertices(x, y, Common.choose([square, square, arrow, chevron, star]), {\n                render: {\n                    fillStyle: color,\n                    strokeStyle: color,\n                    lineWidth: 1\n                }\n            }, true);\n        });\n\n        World.add(world, stack);\n\n        // add mouse control\n        const mouse = Mouse.create(render.canvas),\n            mouseConstraint = MouseConstraint.create(engine, {\n                mouse: mouse,\n                constraint: {\n                    stiffness: 0.2,\n                    render: {\n                        visible: false\n                    }\n                }\n            });\n        World.add(world, mouseConstraint);\n\n        // not sure what this does but commented out and no change\n        // keep the mouse in sync with rendering\n        render.mouse = mouse;\n\n\n        Engine.run(engine)\n    }, [])\n    return (\n        <div\n            ref={boxRef}\n            style={{\n                width: \"100%\",\n                height: \"100%\",\n            }}\n        >\n        <canvas ref={canvasRef} />\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport './Blocks';\nimport { Blocks } from './Blocks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Stack the blocks :D !\n      </header>\n      <div className=\"App-content\">\n        <Blocks></Blocks>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}