{"version":3,"sources":["Blocks.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Blocks","boxRef","useRef","canvasRef","useEffect","current","boxWidth","offsetWidth","boxHeight","offsetHeight","boxCenter","stackLeft","stackWidth","floorVerticalCenter","stackTop","stackRows","engine","Engine","create","world","render","Render","element","undefined","canvas","options","width","height","background","wireframes","stack","Composites","x","y","Bodies","rectangle","World","add","isStatic","mouse","Mouse","mouseConstraint","MouseConstraint","constraint","stiffness","visible","run","ref","style","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oPAYaA,EAAS,WAClB,IAAMC,EAASC,iBAAO,MAChBC,EAAYD,iBAAO,MA4DzB,OA3DAE,qBAAU,WAEN,GAAuB,OAAnBH,EAAOI,QAAX,CAIA,IAAMC,EAAWL,EAAOI,QAAQE,YAC1BC,EAAYP,EAAOI,QAAQI,aAC3BC,EAAYJ,EAAW,EACvBK,EAAYD,EAAYE,IACxBC,EAAsBL,EAAY,GAClCM,EAAWD,EAlBLE,IAkByC,IAE/CC,EAASC,SAAOC,SAClBC,EAAQH,EAAOG,MACbC,EAASC,SAAOH,OAAO,CACzBI,QAASrB,EAAOI,cAAWkB,EAC3BP,OAAQA,EACRQ,OAAQrB,EAAUE,cAAWkB,EAC7BE,QAAS,CACLC,MAAOpB,EACPqB,OAAQnB,EACRoB,WAAY,uBACZC,YAAY,KAKdC,EAAQC,aAAWD,MAAMnB,EAAWG,EAtC7B,EACH,EAqCmE,EAAG,GAAG,SAACkB,EAAGC,GACnF,OAAOC,SAAOC,UAAUH,EAAGC,EAzCpB,GACC,OA2CZG,QAAMC,IAAIlB,EAAOW,GACjBM,QAAMC,IAAIlB,EAAO,CACbe,SAAOC,UAAUzB,EAAWG,EAAqBP,EAvCtC,GAuCgE,CAAEgC,UAAU,MAK3F,IAAMC,EAAQC,QAAMtB,OAAOE,EAAOI,QAC9BiB,EAAkBC,kBAAgBxB,OAAOF,EAAQ,CAC7CuB,MAAOA,EACPI,WAAY,CACRC,UAAW,GACXxB,OAAQ,CACJyB,SAAS,MAIzBT,QAAMC,IAAIlB,EAAOsB,GAOjBxB,SAAO6B,IAAI9B,GACXK,SAAOyB,IAAI1B,MACZ,IAEC,qBACI2B,IAAK9C,EACL+C,MAAO,CACHtB,MAAO,OACPC,OAAQ,QAJhB,SAOA,wBAAQoB,IAAK5C,OChEN8C,MAbf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,mCAGA,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,UCEOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASxC,OACP,cAAC,IAAMyC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.155ec788.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport {Bodies, Composites, Engine, Mouse, MouseConstraint, Render, World} from \"matter-js\"\n\nconst blockWidth = 80\nconst blockHeight = 80\nconst stackColumns = 6\nconst stackRows = 4\nconst stackWidth = stackColumns * blockWidth\nconst stackHeight = stackRows * blockHeight\n\nconst floorThickness = 50\n\nexport const Blocks = () => {\n    const boxRef = useRef(null)\n    const canvasRef = useRef(null)\n    useEffect(() => {\n        // TODO allow window resize to resize canvas width / height\n        if (boxRef.current === null) {\n            return\n        }\n\n        const boxWidth = boxRef.current.offsetWidth\n        const boxHeight = boxRef.current.offsetHeight\n        const boxCenter = boxWidth / 2\n        const stackLeft = boxCenter - stackWidth / 2\n        const floorVerticalCenter = boxHeight - 40\n        const stackTop = floorVerticalCenter - stackHeight - 100\n\n        const engine = Engine.create(),\n            world = engine.world\n        const render = Render.create({\n            element: boxRef.current || undefined,\n            engine: engine,\n            canvas: canvasRef.current || undefined,\n            options: {\n                width: boxWidth,\n                height: boxHeight,\n                background: \"rgba(255, 0, 0, 0.5)\",\n                wireframes: false,\n            },\n        })\n\n        // add bodies\n        const stack = Composites.stack(stackLeft, stackTop, stackColumns, stackRows, 0, 0, (x, y) => {\n            return Bodies.rectangle(x, y, blockWidth, blockHeight);\n        });\n\n        World.add(world, stack);\n        World.add(world, [\n            Bodies.rectangle(boxCenter, floorVerticalCenter, boxWidth, floorThickness, { isStatic: true })\n        ]);\n\n\n        // add mouse control\n        const mouse = Mouse.create(render.canvas),\n            mouseConstraint = MouseConstraint.create(engine, {\n                mouse: mouse,\n                constraint: {\n                    stiffness: 0.2,\n                    render: {\n                        visible: false\n                    }\n                }\n            });\n        World.add(world, mouseConstraint);\n\n        //// not sure what this does but commented out and no change\n        // keep the mouse in sync with rendering\n        // render.mouse = mouse;\n\n\n        Engine.run(engine)\n        Render.run(render)\n    }, [])\n    return (\n        <div\n            ref={boxRef}\n            style={{\n                width: \"100%\",\n                height: \"100%\",\n            }}\n        >\n        <canvas ref={canvasRef} />\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport './Blocks';\nimport { Blocks } from './Blocks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Stack the blocks :D !\n      </header>\n      <div className=\"App-content\">\n        <Blocks></Blocks>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}